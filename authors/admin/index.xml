<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>New World</title>
    <link>https://youngwilliamz.github.io/authors/admin/</link>
      <atom:link href="https://youngwilliamz.github.io/authors/admin/index.xml" rel="self" type="application/rss+xml" />
    <description>New World</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><lastBuildDate>Sun, 08 Sep 2019 20:56:59 +0800</lastBuildDate>
    <image>
      <url>https://youngwilliamz.github.io/img/icon-192.png</url>
      <title>New World</title>
      <link>https://youngwilliamz.github.io/authors/admin/</link>
    </image>
    
    <item>
      <title>CSAPP 笔记 第二章《信息的表示和处理》</title>
      <link>https://youngwilliamz.github.io/post/csapp-note-2/</link>
      <pubDate>Sun, 08 Sep 2019 20:56:59 +0800</pubDate>
      <guid>https://youngwilliamz.github.io/post/csapp-note-2/</guid>
      <description>

&lt;p&gt;这章的内容非常基础并且重要，但为了节省篇幅，此篇笔记仅记录笔者不熟的或者认为非常重要且易出错的知识点。&lt;/p&gt;

&lt;h2 id=&#34;为什么要用-二进制&#34;&gt;为什么要用「二进制」？&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;二值信号能够很容易地被表示、存储和传输，例如，可以表 示为穿孔卡片上有洞或无洞、导线上的高电压或低电压，或者顺时针或逆时针的磁场。对 二值信号进行存储和执行计算的电子电路非常简单和可靠，制造商能够在 一 个单独的硅片 上集成数百万甚至数十亿个这样的电路。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;little-endian-小端-和-big-endian-大端&#34;&gt;&amp;ldquo;little endian(小端)&amp;ldquo;和 &amp;ldquo;big endian(大端)&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;最低有效字节在最前面的方式，称为小端法 (little endian) 。&lt;/p&gt;

&lt;p&gt;最高有效字节在最前面的方式，称为大端法 (big endian) 。&lt;/p&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;p&gt;假设变量 x 的类型为 int ，位于地址 0x100 处，它的十六进制值为Ox01234567。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;0x100&lt;/th&gt;
&lt;th&gt;0x101&lt;/th&gt;
&lt;th&gt;0x102&lt;/th&gt;
&lt;th&gt;0x103&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;大端&lt;/td&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;67&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;小端&lt;/td&gt;
&lt;td&gt;67&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>CSAPP 笔记 第一章《计算机系统漫游》</title>
      <link>https://youngwilliamz.github.io/post/csapp-note-1/</link>
      <pubDate>Sun, 01 Sep 2019 22:40:06 +0800</pubDate>
      <guid>https://youngwilliamz.github.io/post/csapp-note-1/</guid>
      <description>

&lt;p&gt;最近开始忙秋招，「码农翻身」公众号及同名书的作者老刘在知识星球里举办了读《CSAPP》的活动，之前一直没啃下来，希望能够借此机会逼自己一把，把这本厚厚的经典看完，并好好写笔记。&lt;/p&gt;

&lt;p&gt;计算机系统 = 硬件 + 系统软件&lt;/p&gt;

&lt;p&gt;作者如是说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“如果你全力投身学习本书中的概念，完全理解底 层计算机系统以及它对应用程序的影响，那么你会步上成为为数不多的“大牛&amp;rdquo;的道路。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看完这本书你将会学到：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;实践技巧&lt;/li&gt;
&lt;li&gt;优化代码小窍门&lt;/li&gt;
&lt;li&gt;了解编译器如何实现&lt;/li&gt;
&lt;li&gt;如何识别和避免连接时那些令人讨厌的错误&lt;/li&gt;
&lt;li&gt;如何编写自己的 Unix shell&lt;/li&gt;
&lt;li&gt;认识并发的陷阱&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-信息就是-位-上下文&#34;&gt;1. 信息就是「位+上下文」&lt;/h2&gt;

&lt;p&gt;hello 程序生命周期开端：hel lo.c 源文件&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;由2进制的 ASCII 编码后的字符组成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;文本文件：只有ASCII字符构成的文件。如：hello.c&lt;/p&gt;

&lt;p&gt;二进制文件：非文本文件。&lt;/p&gt;

&lt;p&gt;因此，在计算机的世界中，所有的信息都是由一串比特表示。&lt;/p&gt;

&lt;p&gt;区分不同数据对象的唯一方法是我们读到这些数据对象时的上下文。&lt;/p&gt;

&lt;h2 id=&#34;2-程序被其他程序翻译成不同的格式&#34;&gt;2. 程序被其他程序翻译成不同的格式&lt;/h2&gt;

&lt;p&gt;hello 程序生命周期：可执行文件，或者叫「目标程序」&lt;/p&gt;

&lt;p&gt;编译器驱动程序：能够将「源文件」转化「目标文件」，如&lt;code&gt;gcc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;linux&amp;gt; gee -o hello hello.c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这一过程又叫翻译，可分为四个阶段：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./image/CSAPP1-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;执行这四个阶段的程序一起构成「编译系统」(compilation system)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;预处理阶段：修改源文件，得到另一个 C 程序。

&lt;ul&gt;
&lt;li&gt;删除部分#开头的命令&lt;/li&gt;
&lt;li&gt;插入一些系统头文件，如&lt;code&gt;stdio.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;编译阶段：翻译成汇编文本文件。&lt;/li&gt;
&lt;li&gt;汇编阶段：将汇编文本文件翻译成机器语言指令，并打包成「可重定位目标程序」(relocatable object program)的格式。&lt;/li&gt;
&lt;li&gt;链接阶段：合并一些调用的头文件，得到最终的可执行文件。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-了解编译系统如何工作&#34;&gt;3. 了解编译系统如何工作&lt;/h2&gt;

&lt;p&gt;程序员必须知道编译系统如何工作的重要原因：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;优化程序性能&lt;/li&gt;
&lt;li&gt;理解连接时出现的错误&lt;/li&gt;
&lt;li&gt;避免安全漏洞&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-处理器读并解释储存在内存中的指令&#34;&gt;4. 处理器读并解释储存在内存中的指令&lt;/h2&gt;

&lt;p&gt;系统的硬件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;总线（BUS）

&lt;ul&gt;
&lt;li&gt;贯穿整个系统的一组电子管道&lt;/li&gt;
&lt;li&gt;通常总线被设计成传送定长的字节块，也就是字 (word)。字长是一个基本的系统参数，一般为 4 个字节( 32 位）或者 8 个字节（64位）。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I/O设备

&lt;ul&gt;
&lt;li&gt;系统与外部世界的联系通道。&lt;/li&gt;
&lt;li&gt;每个I/O设备都通过一个控制器或适配器与I/O总线相连。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;主存(Main Memory)

&lt;ul&gt;
&lt;li&gt;临时存储设备&lt;/li&gt;
&lt;li&gt;物理上：动态随机存取储存器(DRAM)。&lt;/li&gt;
&lt;li&gt;逻辑上：线性字节数组，每个字节都有其唯一的地址。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;处理器（CPU）

&lt;ul&gt;
&lt;li&gt;解释(或执行)存储在主存中指令的引擎&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;运行 hello 文件：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在 shell 中输入&lt;code&gt;./hello&lt;/code&gt; 之后，shell 程序将字符逐一读入寄存器，再把它放入内存。&lt;/li&gt;
&lt;li&gt;回车后，shell知道输入完成，开始执行一系列指令来加载可执行的 hello 文件。&lt;/li&gt;
&lt;li&gt;这些指令将 hello 目标文件从磁盘复制到内存中。&lt;/li&gt;
&lt;li&gt;处理器将目标文件中的机器语言指令复制到寄存器中，开始解析里面的指令并执行。&lt;/li&gt;
&lt;li&gt;数据被现实在屏幕上。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;注：利用 DMA 技术可以不通过处理器而直接从磁盘到达主存。&lt;/p&gt;

&lt;h2 id=&#34;5-高速缓存至关重要&#34;&gt;5. 高速缓存至关重要&lt;/h2&gt;

&lt;p&gt;上一个运行 hello 程序的例子中，信息需要依次经过：磁盘，主存，寄存器。&lt;/p&gt;

&lt;p&gt;这样会造成开销，减慢程序。&lt;/p&gt;

&lt;p&gt;因此，需要使得这些复制操作尽可能快的完成。&lt;/p&gt;

&lt;h2 id=&#34;6-储存设备形成层次结构&#34;&gt;6 储存设备形成层次结构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;./image/CSAPP1-9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;7-操作系统管理硬件&#34;&gt;7 操作系统管理硬件&lt;/h2&gt;

&lt;p&gt;操作系统：应用程序和硬件之间插入的一层软件。&lt;/p&gt;

&lt;p&gt;操作系统两大基本功能：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;防止硬件被失控的应用程序滥用&lt;/li&gt;
&lt;li&gt;向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;操作系统提供三种基本的抽象：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;文件是对I/O设备的抽象&lt;/li&gt;
&lt;li&gt;虚拟内存是对主存和磁盘的抽象&lt;/li&gt;
&lt;li&gt;进程是处理器、主存和I/O设备的抽象&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;8-系统之间利用网络通信&#34;&gt;8 系统之间利用网络通信&lt;/h2&gt;

&lt;p&gt;网络可视为一个I/O设备。&lt;/p&gt;

&lt;h2 id=&#34;9-重要主题&#34;&gt;9 重要主题&lt;/h2&gt;

&lt;p&gt;Amdahl定律：&lt;/p&gt;

&lt;p&gt;并发和并行&lt;/p&gt;

&lt;p&gt;计算机抽象&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What is POSIX?</title>
      <link>https://youngwilliamz.github.io/post/what-is-posix/</link>
      <pubDate>Tue, 20 Aug 2019 02:10:40 +0800</pubDate>
      <guid>https://youngwilliamz.github.io/post/what-is-posix/</guid>
      <description>

&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;

&lt;p&gt;可移植操作系统接口（英语：&lt;code&gt;Portable Operating System Interface&lt;/code&gt;，缩写为&lt;code&gt;POSIX&lt;/code&gt;）是IEEE为要在各种 &lt;code&gt;UNIX&lt;/code&gt; 操作系统上运行软件，而定义 API 的一系列互相关联的&lt;strong&gt;标准的总称&lt;/strong&gt;，其正式称呼为&lt;code&gt;IEEE Std 1003&lt;/code&gt;，而国际标准名称为 &lt;code&gt;ISO/IEC 9945&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;来源&#34;&gt;来源&lt;/h2&gt;

&lt;p&gt;此标准源于一个大约开始于1985年的项目。&lt;/p&gt;

&lt;p&gt;POSIX 这个名称是由理查德·斯托曼（RMS）应IEEE的要求而提议的一个易于记忆的名称。&lt;/p&gt;

&lt;p&gt;它基本上是 Portable Operating System Interface（可移植操作系统接口）的缩写，而X则表明其对Unix API的传承。&lt;/p&gt;

&lt;h2 id=&#34;组成&#34;&gt;组成&lt;/h2&gt;

&lt;p&gt;当前的POSIX主要分为四个部分：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Base Definitions&lt;/li&gt;
&lt;li&gt;System Interfaces&lt;/li&gt;
&lt;li&gt;Shell and Utilities&lt;/li&gt;
&lt;li&gt;Rationale&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;posix-操作系统&#34;&gt;POSIX 操作系统&lt;/h2&gt;

&lt;p&gt;正式认证的包括 macOS 等。&lt;/p&gt;

&lt;p&gt;未得到正式认证，但基本符合 POSIX 标准的有 Android、FreeBSD 等。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/POSIX&#34; target=&#34;_blank&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>TED 演讲吸收笔记与总结</title>
      <link>https://youngwilliamz.github.io/post/ted/</link>
      <pubDate>Sat, 17 Aug 2019 02:48:55 +0000</pubDate>
      <guid>https://youngwilliamz.github.io/post/ted/</guid>
      <description>

&lt;h2 id=&#34;what-do-top-students-do-differently&#34;&gt;What do top students do differently?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Na8m4GPqA30&#34; target=&#34;_blank&#34;&gt;视频连接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;重点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t worry about IQ. 获得高分的决定因素不是 IQ，而是方法与努力。而且或者 IQ 是天生的，是你无法控制的。&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t &lt;code&gt;just&lt;/code&gt; aim to work hard. 方法至关重要，只会努力可能还会带来更坏的结果。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通过调查发现，考前大部分考生会一直重复地看书或者笔记，而考高分的那一部分同学则会一直做练习题。因为考试考的不是记忆，而是知识的运用。&lt;/li&gt;
&lt;li&gt;许多人会指定短期的计划，比如一周的时间表。但实际上很少人能够坚持自己的时间表。通过研究那些能够坚持的人例子，发现他们经常会在每天某一个时间段设置一个自己喜欢的活动，比如打篮球，这样每天过的有盼头。而那些早早放弃的人一般会把时间安排的非常经凑，没有一个时间段是自己喜欢真心喜欢的（娱乐）活动，因此容易厌倦，坚持不下去。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-to-learn-everything-jsoh-kaufman-tedxcsu&#34;&gt;How to learn everything | Jsoh Kaufman | TEDxCSU&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Na8m4GPqA30&#34; target=&#34;_blank&#34;&gt;视频连接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;问题：人到中年，突然意识到没有自由时间去学习了。&lt;/p&gt;

&lt;p&gt;然后讲者发现：Florida State university 的一位教授，K. Anders Ericsson 最先提出 1万小时理论，即花费1万小时去学习一个新知识，最终能够成为这个领域的专家。随后还有一本书专门讲 1w 小时理论。&lt;/p&gt;

&lt;p&gt;但是，讲者时间有限，没有1w小时慢慢学啊。&lt;/p&gt;

&lt;p&gt;学习是有曲线的，前期只要一点点练习就可以达到相对高的高度。&lt;/p&gt;

&lt;p&gt;讲者研究出来的最有效的时间是 &lt;strong&gt;20 小时&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;四步学习法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Deconstruct the skill 分解技能/知识点。&lt;/li&gt;
&lt;li&gt;Learn enough to self-correct&lt;/li&gt;
&lt;li&gt;Remove the practice barrier 降低学习门槛&lt;/li&gt;
&lt;li&gt;Practice at least 20 hours 最少练习/学习 20 小时&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;时间分段：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;前2小时，保证所需要的东西齐全。&lt;/li&gt;
&lt;li&gt;开始练习&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在阻止你的不是学习的难度了，而是你想学什么？What do you want to learn？&lt;/p&gt;

&lt;h2 id=&#34;what-one-skill-an-awesome-life-dr-shimi-kang&#34;&gt;What one skill = an awesome life? | Dr. Shimi Kang&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=1EHZAQmw2JA&#34; target=&#34;_blank&#34;&gt;视频连接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一个技巧就能让你拥有一个 awesome（棒极了） 的生活?&lt;/p&gt;

&lt;p&gt;讲者是一位哈佛高材生、医生，但却依旧活的很累（in trouble），连三个孩子都照顾不过来，完全比不过当初成功养育她兄弟姐妹五个人的妈妈。&lt;/p&gt;

&lt;p&gt;她在一番思考总结之后发现，最重要的是 Adaptability（适应能力）。&lt;/p&gt;

&lt;p&gt;同时，她拿海豚作为例子进行讲解她总结的「POD」理论，也就是 Adaptability 的关键：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;P: Play. 儿时那种无忧无虑的玩耍，没有规则，可以随意畅想。&lt;/li&gt;
&lt;li&gt;O: Others. Why we adapt？O 是我们适应的源头，我们需要社交，需要交流，要不然会生病，心理疾病。&lt;/li&gt;
&lt;li&gt;D: Downtime. When we adapt? 要有一段专门放松的时间。“压力是21世纪第一病因”。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;讲者提出三个单词时，都说了这个是对自己的 reward（奖励），奖励自己努力工作，努力学习。&lt;/p&gt;

&lt;p&gt;我的感想：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先，通过这个演讲我学的最多就是讲者吐字清晰，一字一停，完全不会因为自己是 native speaker 而说的很快。而我平时喜欢说话很快，老是无法清晰的表达自己的观点。这点值得我学习。&lt;/li&gt;
&lt;li&gt;其次，她的「POD」能够成书，还能畅销世界，我觉得实在厉害。虽然这个理论可能很多人都懂，但能够说出来，总结出来，并写成书的还是很少的。可见人与人的差距还是非常大的，而且随着现代人越来越忙，突然发现有人说「放松」、「玩耍」可以拥有更好的生活，岂不是找到偷懒的借口？&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>OpenCredit</title>
      <link>https://youngwilliamz.github.io/project/opencredit/</link>
      <pubDate>Tue, 13 Aug 2019 23:20:49 +0800</pubDate>
      <guid>https://youngwilliamz.github.io/project/opencredit/</guid>
      <description></description>
    </item>
    
    <item>
      <title>从 0 实现 Docker</title>
      <link>https://youngwilliamz.github.io/project/mydocker/</link>
      <pubDate>Sun, 11 Aug 2019 01:49:46 +0800</pubDate>
      <guid>https://youngwilliamz.github.io/project/mydocker/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Docker 背后： Linux 的 /proc</title>
      <link>https://youngwilliamz.github.io/post/linux-proc/</link>
      <pubDate>Fri, 02 Aug 2019 02:04:09 +0000</pubDate>
      <guid>https://youngwilliamz.github.io/post/linux-proc/</guid>
      <description>

&lt;h2 id=&#34;为什么要有-proc&#34;&gt;为什么要有 &lt;code&gt;/proc&lt;/code&gt;？&lt;/h2&gt;

&lt;p&gt;想必在日常开发&lt;del&gt;写&lt;/del&gt;查 BUG 中，你会经常用到像 &lt;code&gt;top&lt;/code&gt;、&lt;code&gt;ps&lt;/code&gt; 这样的 Linux 命令来查看进程、CPU 的状态吧。&lt;/p&gt;

&lt;p&gt;那你是否有想过：这些不都是内核才知道的吗？而作为身处 shell （用户态）的我们又是通过什么途径知道这些的呢？&lt;/p&gt;

&lt;p&gt;是有什么 system call 吗？是有什么高级的接口吗？&lt;/p&gt;

&lt;p&gt;不不不，其实是通过一个神奇的目录，也就是今天的主角 &lt;code&gt;/proc&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;实际上，&lt;code&gt;top&lt;/code&gt; 中的数据就是读取 &lt;code&gt;/proc/stat&lt;/code&gt; 文件获得的，&lt;code&gt;/proc/stat&lt;/code&gt; 文件被读取时会自动更新，从而 &lt;code&gt;top&lt;/code&gt; 获得最新的 CPU 占用率情况。&lt;/p&gt;

&lt;h2 id=&#34;proc-是什么&#34;&gt;&lt;code&gt;/proc&lt;/code&gt; 是什么？&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;/proc&lt;/code&gt; 其实不是一个“真正”的文件目录，而是一个“虚拟”的文件系统（virtual filesystem）。&lt;/p&gt;

&lt;p&gt;为什么是虚拟的呢？因为它不写入&lt;strong&gt;外存&lt;/strong&gt;空间，只存在于&lt;strong&gt;内存&lt;/strong&gt;中。&lt;/p&gt;

&lt;p&gt;它包含了系统运行时的信息，包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当前运行进程信息&lt;/li&gt;
&lt;li&gt;系统内存&lt;/li&gt;
&lt;li&gt;mount 设备信息&lt;/li&gt;
&lt;li&gt;一些硬件配置&lt;/li&gt;
&lt;li&gt;&amp;hellip;等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，可以把它当作&lt;strong&gt;内核&lt;/strong&gt;的信息中心。&lt;/p&gt;

&lt;p&gt;当然许多系统工具都是通过简单读取该目录下的某些内容。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;lsmod&lt;/code&gt; = &lt;code&gt;cat /proc/modules&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lspci&lt;/code&gt; = &lt;code&gt;cat /proc/pci&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在系统正在运行时，你甚至可以通过修改 &lt;code&gt;/proc&lt;/code&gt; 目录下文件，来读取修改系统的内核参数（sysctl）。&lt;/p&gt;

&lt;h2 id=&#34;proc-基本目录结构&#34;&gt;&lt;code&gt;/proc&lt;/code&gt; 基本目录结构&lt;/h2&gt;

&lt;p&gt;因为文件都在内存中，如果你去看每个文件的大小，你会发现都是 0，除了 &lt;code&gt;kcore&lt;/code&gt;, &lt;code&gt;mtrr&lt;/code&gt; and &lt;code&gt;self&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;当遍历这个目录的时候，会发现有些数字，这些都是为每个进程创建的空间，数字就是它们的 PID。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[go_dev@0f8b372ed635 proc]$ ll /proc
total 0
dr-xr-xr-x  9 go_dev go_dev     0 Aug  1 18:43 1
dr-xr-xr-x  9 go_dev go_dev     0 Aug  1 18:44 30
drwxrwxrwt  2 root   root      40 Aug  1 18:43 acpi
-r--r--r--  1 root   root       0 Aug  1 18:44 buddyinfo
dr-xr-xr-x  4 root   root       0 Aug  1 18:43 bus
-r--r--r--  1 root   root       0 Aug  1 18:44 cgroups
-r--r--r--  1 root   root       0 Aug  1 18:44 cmdline
-r--r--r--  1 root   root   23709 Aug  1 18:44 config.gz
-r--r--r--  1 root   root       0 Aug  1 18:44 consoles
-r--r--r--  1 root   root       0 Aug  1 18:44 cpuinfo
-r--r--r--  1 root   root       0 Aug  1 18:44 crypto
-r--r--r--  1 root   root       0 Aug  1 18:44 devices
-r--r--r--  1 root   root       0 Aug  1 18:44 diskstats
-r--r--r--  1 root   root       0 Aug  1 18:44 dma
dr-xr-xr-x  2 root   root       0 Aug  1 18:44 driver
-r--r--r--  1 root   root       0 Aug  1 18:44 execdomains
-r--r--r--  1 root   root       0 Aug  1 18:44 fb
-r--r--r--  1 root   root       0 Aug  1 18:44 filesystems
dr-xr-xr-x  8 root   root       0 Aug  1 18:43 fs
-r--r--r--  1 root   root       0 Aug  1 18:44 interrupts
-r--r--r--  1 root   root       0 Aug  1 18:44 iomem
-r--r--r--  1 root   root       0 Aug  1 18:44 ioports
dr-xr-xr-x 31 root   root       0 Aug  1 18:43 irq
-r--r--r--  1 root   root       0 Aug  1 18:44 kallsyms
crw-rw-rw-  1 root   root    1, 3 Aug  1 18:43 kcore
-r--r--r--  1 root   root       0 Aug  1 18:44 key-users
crw-rw-rw-  1 root   root    1, 3 Aug  1 18:43 keys
-r--------  1 root   root       0 Aug  1 18:44 kmsg
-r--------  1 root   root       0 Aug  1 18:44 kpagecgroup
-r--------  1 root   root       0 Aug  1 18:44 kpagecount
-r--------  1 root   root       0 Aug  1 18:44 kpageflags
-r--r--r--  1 root   root       0 Aug  1 18:44 loadavg
-r--r--r--  1 root   root       0 Aug  1 18:44 locks
-r--r--r--  1 root   root       0 Aug  1 18:44 meminfo
-r--r--r--  1 root   root       0 Aug  1 18:44 misc
-r--r--r--  1 root   root       0 Aug  1 18:44 modules
lrwxrwxrwx  1 root   root      11 Aug  1 18:44 mounts -&amp;gt; self/mounts
dr-xr-xr-x  2 root   root       0 Aug  1 18:44 mpt
-rw-r--r--  1 root   root       0 Aug  1 18:44 mtrr
lrwxrwxrwx  1 root   root       8 Aug  1 18:44 net -&amp;gt; self/net
-r--r--r--  1 root   root       0 Aug  1 18:44 pagetypeinfo
-r--r--r--  1 root   root       0 Aug  1 18:44 partitions
crw-rw-rw-  1 root   root    1, 3 Aug  1 18:43 sched_debug
lrwxrwxrwx  1 root   root       0 Aug  1 18:43 self -&amp;gt; 30
-rw-------  1 root   root       0 Aug  1 18:44 slabinfo
-r--r--r--  1 root   root       0 Aug  1 18:44 softirqs
-r--r--r--  1 root   root       0 Aug  1 18:44 stat
-r--r--r--  1 root   root       0 Aug  1 18:44 swaps
dr-xr-xr-x  1 root   root       0 Aug  1 18:43 sys
--w-------  1 root   root       0 Aug  1 18:43 sysrq-trigger
dr-xr-xr-x  2 root   root       0 Aug  1 18:44 sysvipc
lrwxrwxrwx  1 root   root       0 Aug  1 18:43 thread-self -&amp;gt; 30/task/30
crw-rw-rw-  1 root   root    1, 3 Aug  1 18:43 timer_list
dr-xr-xr-x  4 root   root       0 Aug  1 18:44 tty
-r--r--r--  1 root   root       0 Aug  1 18:44 uptime
-r--r--r--  1 root   root       0 Aug  1 18:44 version
-r--------  1 root   root       0 Aug  1 18:44 vmallocinfo
-r--r--r--  1 root   root       0 Aug  1 18:44 vmstat
-r--r--r--  1 root   root       0 Aug  1 18:44 zoneinfo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在此介绍几个比较重要的部分：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;/proc/N&lt;/th&gt;
&lt;th&gt;PID 为 N 的进程信息&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/proc/N/cmdline&lt;/td&gt;
&lt;td&gt;进程启动命令&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/cwd&lt;/td&gt;
&lt;td&gt;链接到进程当前工作目录&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/environ&lt;/td&gt;
&lt;td&gt;进程环境变量列表&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/exe&lt;/td&gt;
&lt;td&gt;链接到进程的执行命令文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/fd&lt;/td&gt;
&lt;td&gt;包含进程相关的所有文件描述符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/maps&lt;/td&gt;
&lt;td&gt;与进程相关的内存映射信息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/mem&lt;/td&gt;
&lt;td&gt;指代进程持有的内存，不可读&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/root&lt;/td&gt;
&lt;td&gt;链接到进程的根目录&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/stat&lt;/td&gt;
&lt;td&gt;进程的状态&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/statm&lt;/td&gt;
&lt;td&gt;进程使用的内存状态&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/status&lt;/td&gt;
&lt;td&gt;进程状态信息，比 stat/statm 更具可读性&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/self/&lt;/td&gt;
&lt;td&gt;链接到当前正在运行的进程&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如果像了解更多的话，请自行 google 或者看看 &lt;a href=&#34;https://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/proc.html&#34; target=&#34;_blank&#34;&gt;Linux Filesystem Hierarchy: 1.14. /proc&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;docker-如何利用到-proc&#34;&gt;Docker 如何利用到 &lt;code&gt;/proc&lt;/code&gt;？&lt;/h2&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/proc.html&#34; target=&#34;_blank&#34;&gt;Linux Filesystem Hierarchy: 1.14. /proc&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/27082348/&#34; target=&#34;_blank&#34;&gt;《自己动手写Docker》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Procfs&#34; target=&#34;_blank&#34;&gt;wiki: procfs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>《剑指Offer》笔记</title>
      <link>https://youngwilliamz.github.io/post/coding-interviews-note-1/</link>
      <pubDate>Sun, 28 Jul 2019 18:17:25 +0000</pubDate>
      <guid>https://youngwilliamz.github.io/post/coding-interviews-note-1/</guid>
      <description>

&lt;p&gt;还没好好看一遍《剑指Offer》，希望在阅读的过程中能记录一下，同时也方便以后复习。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;3-高质量的代码&#34;&gt;3. 高质量的代码&lt;/h2&gt;

&lt;h3 id=&#34;3-2-代码的规范性&#34;&gt;3.2 代码的规范性&lt;/h3&gt;

&lt;h4 id=&#34;代码的完整性&#34;&gt;代码的完整性:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;功能测试：要满足基本功能、尽量突破常规思维的限制&lt;/li&gt;
&lt;li&gt;边界测试：考虑循环、递归终止条件；字符串转整数时确保极大极小值等。&lt;/li&gt;
&lt;li&gt;负面测试：各种可能的错误输入&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;3-种错误处理的方法&#34;&gt;3 种错误处理的方法：&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;返回值&lt;/td&gt;
&lt;td&gt;和系统 API 一致，0 为正常，其他为错误&lt;/td&gt;
&lt;td&gt;不能方便使用计算结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;全局变量&lt;/td&gt;
&lt;td&gt;可以直接得到计算结果，方便使用&lt;/td&gt;
&lt;td&gt;很容易忘记检查&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;异常&lt;/td&gt;
&lt;td&gt;逻辑清晰，明确定义错误类型&lt;/td&gt;
&lt;td&gt;一些语言不支持，对性能有负面影响&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;具体用哪种需要考虑具体场景，可以和面试讨论一下采用哪种比较合适。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenWRT 18.06 IPv6 开启 Relay，LAN 口获取 IPv6 公网地址</title>
      <link>https://youngwilliamz.github.io/post/openwrt-ipv6-relay/</link>
      <pubDate>Sun, 10 Mar 2019 09:48:55 +0000</pubDate>
      <guid>https://youngwilliamz.github.io/post/openwrt-ipv6-relay/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;此方案已失败，但还是可以参考的，说不定你就成功了？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;p&gt;宿舍的路由器一直不太好用，今天把之前买的 K2P 重新刷了 OpenWRT 新版系统。&lt;code&gt;WAN 6&lt;/code&gt; 可以获取到 &lt;code&gt;IPv6&lt;/code&gt; 的公网地址，可是发现 &lt;code&gt;LAN&lt;/code&gt; 口只能获取本地的 &lt;code&gt;IPv6&lt;/code&gt;，用不了，连不上北邮人，每次都得切到 &lt;code&gt;SUSTC-Wifi&lt;/code&gt; 才能连，实在非常不方便。于是就研究了几小时绕了一大圈才找到可行的解决办法。在此记录下。&lt;/p&gt;

&lt;h1 id=&#34;wan-6-设置&#34;&gt;&lt;code&gt;WAN 6&lt;/code&gt; 设置&lt;/h1&gt;

&lt;p&gt;协议：&lt;code&gt;DHCPv6 客户端&lt;/code&gt;
请求 IPv6 地址：&lt;code&gt;try&lt;/code&gt;（不能选 force）&lt;/p&gt;

&lt;h1 id=&#34;lan-设置&#34;&gt;&lt;code&gt;LAN&lt;/code&gt; 设置&lt;/h1&gt;

&lt;p&gt;最下面 &lt;code&gt;DHCP 服务器&lt;/code&gt; 中 &lt;code&gt;IPv6 设置&lt;/code&gt; 下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;路由通告服务&lt;/code&gt;、&lt;code&gt;DHCPv6 服务&lt;/code&gt;、&lt;code&gt;NDP 代理&lt;/code&gt;全部选为&lt;code&gt;混合模式&lt;/code&gt;。这样 &lt;code&gt;WAN 6&lt;/code&gt; 和 &lt;code&gt;LAN&lt;/code&gt; 就都可以获得公网 &lt;code&gt;IPv6&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DHCPv6 模式&lt;/code&gt; 选择 &lt;code&gt;无状态的 + 有状态的&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;“上面「一般配置-物理设置」，找到「接口」，点击最右边的小三角，弹出下拉菜单。默认这里「交换机 VLAN eth0.2 (lan, wan, wan6)」是没有选上的吧？勾选上这个。为啥选这个呢？因为它有 wan6 哇～”&lt;/p&gt;

&lt;p&gt;保存并应用。等一段时间还没有生效的话，就重启。我是重启完立马就有了原生 &lt;code&gt;IPv6&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&#34;主要参考&#34;&gt;主要参考&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://haoyu.love/blog646.html&#34; target=&#34;_blank&#34;&gt;OpenWrt IPv6 中继&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;ps&#34;&gt;PS&lt;/h1&gt;

&lt;p&gt;我自己在之前的教程中修改了 &lt;code&gt;/etc/config/dhcp&lt;/code&gt;，不知道有没有影响。
只是在&lt;code&gt;config dhcp &#39;lan&#39;&lt;/code&gt; 的最下面添加了 &lt;code&gt;option master &#39;1&#39;&lt;/code&gt;。如果上诉方法对你不起作用，可以试试这个或者使用 &lt;code&gt;NAT&lt;/code&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Caoz《成长的烦恼》笔记</title>
      <link>https://youngwilliamz.github.io/post/caoz-class-node/</link>
      <pubDate>Fri, 28 Dec 2018 21:48:55 +0000</pubDate>
      <guid>https://youngwilliamz.github.io/post/caoz-class-node/</guid>
      <description>

&lt;p&gt;&lt;h2&gt;目录&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;这门课是张哥（stormzhang）在朋友圈推荐的，买的话可以直接进入 Caoz 的星球。我主要是冲着星球去的，因为星球价值真的高啊。其实之前本来就打算进星球的，无奈刚换电脑，比较拮据，就只好等待机会。进了星球，发现一堆创业大佬，就是一个人脉圈啊，有没有作用，就看你的本事了。以上就是星球附赠的课程《成长的烦恼》的由来。因为时间限制，28 号晚上就会无法访问，就想称此机会好好读读。&lt;/p&gt;

&lt;h2 id=&#34;1-读书时代&#34;&gt;1. 读书时代&lt;/h2&gt;

&lt;h3 id=&#34;1-1-尽早确立职场目标并准备&#34;&gt;1.1. 尽早确立职场目标并准备&lt;/h3&gt;

&lt;p&gt;曹大在这里描述了一下自己的学生生涯，悔恨自己当初没有好好学好专业课，以至于错失许多机会。&lt;/p&gt;

&lt;p&gt;摘录：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;对于专业技能，特别是计算机的专业技能，我建议是一精多通：你能在某个特定领域达到足够的高度，而其他相关领域达到一定的标准。原因：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;需要跟不同领域的人沟通时，更好地理解对方，换位思考，降低沟通成本。&lt;/li&gt;
&lt;li&gt;可以在特殊情况下自己干。&lt;/li&gt;
&lt;li&gt;企业喜欢这种全才。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;1-2-切忌陷入自以为是的境地&#34;&gt;1.2. 切忌陷入自以为是的境地&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;为什么自以为是？信息获取的渠道很窄。=》价值观趋同，社会认知趋同。&lt;/p&gt;

&lt;p&gt;很多真正很有价值的真相，在读书的时候是看不见的。你从媒体看互联网，你从那些成功者的演说里看互联网，你是看不到真相的。&lt;/p&gt;

&lt;p&gt;如何解决？
多跟不同人群沟通。
尽早实习，多跟不同部门沟通。&lt;/p&gt;

&lt;p&gt;例子1:
遇到没有听说过的的公司可以去搜一下资料，并且听听他们的宣讲。
“今天见到李开复咯，收获好大哦～收获了啥呢？朋友圈的赞。。。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;1-3-基础思想和逻辑需要尽早培养&#34;&gt;1.3. 基础思想和逻辑需要尽早培养&lt;/h3&gt;

&lt;p&gt;理解公式来锻炼自己的理解能力。&lt;/p&gt;

&lt;p&gt;世界上大部分人不具备逻辑能力。无法用最优解的思想去思考。&lt;/p&gt;

&lt;p&gt;学好基础，培养思想，而不是去学工具。&lt;/p&gt;

&lt;h2 id=&#34;2-关于求职&#34;&gt;2. 关于求职&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;经常的错误：不尊重职场。
求职前要有准备，要调研，要在简历中体现你的准备和思考。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;要谦虚和积极。
愿意从基层做起，从小事做起。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;职场要体面一点。
初次相遇，一切重要场合还是需要的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;面试问问题。要有准备。基于企业的公开信息进行提问，挖掘出深度问题。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;3-个人职场定位&#34;&gt;3. 个人职场定位&lt;/h2&gt;

&lt;h3 id=&#34;3-1-找到个人专长&#34;&gt;3.1. 找到个人专长&lt;/h3&gt;

&lt;p&gt;“看上去很全能，其实不堪一击。”&lt;/p&gt;

&lt;h3 id=&#34;3-2-好奇心是动力之源&#34;&gt;3.2. 好奇心是动力之源&lt;/h3&gt;

&lt;p&gt;“一定要知道自己最痴迷什么？”&lt;/p&gt;

&lt;p&gt;“我是怎么甄别信息的，其实很简单，就是好奇心。对某一个新闻，有些人有好奇心就会去挖掘这些信息，而大多数人是不关心的。”&lt;/p&gt;

&lt;h3 id=&#34;3-3-要建立全局意识和整体感&#34;&gt;3.3. 要建立全局意识和整体感&lt;/h3&gt;

&lt;p&gt;“对行业、专业的要有认知，知道机会和方向在哪儿，要知道自己更上台阶需要去哪儿。”&lt;/p&gt;

&lt;p&gt;“所以我经常建议年轻人，读书的，没毕业的或刚毕业的多多看看行业内顶尖企业的财报，了解行业发展的规模/竞争态势。”&lt;/p&gt;

&lt;p&gt;“新兴领域、新兴机会也要多看看，比如百度的热榜，爱站指数，认真挖掘，对行业认知的其实会增加许多。”&lt;/p&gt;

&lt;p&gt;提到几位人物：余军、边江、高少星&lt;/p&gt;

&lt;p&gt;“多去了解企业整体架构。了解公司的核心价值和主要方向。”&lt;/p&gt;

&lt;p&gt;“职场秘密：快速拓展的公司，很多中层为了自己的发展，快速启动新的项目团队，每个项目看上去都很有价值很有机会，然后大家忙忙碌碌为了新的机会各种打拼。但是，其实从公司战略和格局来说，绝大多数都是试验品、甚至是垃圾。等到市场风向逆转的时候，老板开始核查成本，这些乱七八糟的玩意儿全部砍掉。你觉自己很拼，很有贡献，可在老板眼里一文不值。”&lt;/p&gt;

&lt;p&gt;“一定要站的高一点，站在上司的位置看问题，看机会，看方向。如果看不到，多问！”&lt;/p&gt;

&lt;p&gt;“把四五个人的工作量给一个人做，可能会发现只有少数的事有必要做。”&lt;/p&gt;

&lt;p&gt;佩服的人：李兴平，做网站特别强。在没有资源的情况下，比专业人士做的好。&lt;/p&gt;

&lt;h3 id=&#34;3-4-关于个人待遇的话题&#34;&gt;3.4. 关于个人待遇的话题&lt;/h3&gt;

&lt;p&gt;“职场定位，你要对自己的发展目标有整体的认识。”&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;发展期：20-30 关注成长，只有吃苦。只有少数人能真正踩对路，少走弯路。&lt;/li&gt;
&lt;li&gt;成熟期：30-35 达到Top10% 提高企业职位、提高业界影响力、建立人脉。

&lt;ul&gt;
&lt;li&gt;“不需要顶尖水平，因为很多顶尖水平的人没意识到这一点。”&lt;/li&gt;
&lt;li&gt;“达到领域内 Top 10% 并不难，绝大部分人又懒又爱给自己找借口。”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;变现期：35之后务必快速走入变现期。能力够了，影响力和口碑够了。这个时候就要让自己价值最大化。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;索要期权，知道整个期权的比例。要有概念。&lt;/p&gt;

&lt;p&gt;创业要确定好退出条款。毕竟「能共患难，不一定能共享福。」&lt;/p&gt;

&lt;h3 id=&#34;3-5-互相成就&#34;&gt;3.5. 互相成就&lt;/h3&gt;

&lt;p&gt;写工作报告的时候将帮助过自己的人写进去，不仅可以帮助别人，对自己也没什么损失，何乐而不为呢？&lt;/p&gt;

&lt;h2 id=&#34;4-谈谈创业&#34;&gt;4. 谈谈创业&lt;/h2&gt;

&lt;p&gt;这个部分曹大讲了许多自己的例子。大部分内容在曹大的文章都有提及，就不一一粘贴了。&lt;/p&gt;

&lt;h3 id=&#34;4-1-创业需要视野和格局&#34;&gt;4.1. 创业需要视野和格局&lt;/h3&gt;

&lt;p&gt;“所以创业有几个教训：1. 居安思危，眼光要长远。 2. 动作要快，行动力要强。 3. 必要的时候需要魄力，需要团队，需要资金，不能当干。单干格局太低。”&lt;/p&gt;

&lt;p&gt;“你写了很多代码，很酷的技术，没有人用，很少人用，你技术再牛又怎么样呢？&lt;strong&gt;你代码很简单，被广泛用起来，而且为别人真正带来了价值，你的工作就是很有价值。&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;创业历程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上世纪末：

&lt;ul&gt;
&lt;li&gt;交换链。错失 hao123&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2004：

&lt;ul&gt;
&lt;li&gt;OA系统，一个人，安装包压缩到 5m。代码量大，但用的人不多。&lt;/li&gt;
&lt;li&gt;统计系统。代码量少，但很多人用。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4-2-创业需要懂得价值评估&#34;&gt;4.2. 创业需要懂得价值评估&lt;/h3&gt;

&lt;h3 id=&#34;4-3-更好的理解人性&#34;&gt;4.3. 更好的理解人性&lt;/h3&gt;

&lt;h3 id=&#34;4-4-财务和数据&#34;&gt;4.4. 财务和数据&lt;/h3&gt;

&lt;h2 id=&#34;5-总结与回复&#34;&gt;5. 总结与回复&lt;/h2&gt;

&lt;h2 id=&#34;6-最后的感受&#34;&gt;6. 最后的感受&lt;/h2&gt;

&lt;p&gt;这是我自己听完曹大课的感受。曹大在这期课程里着重强调了看待事物的全局观和自己的好奇心。&lt;/p&gt;

&lt;p&gt;先说说全局观，我觉得全局观就是在多个角度想问题：从领导角度也好，从别的部门角度也好，总之就是多想想，多看看，搞明白市场的变化方向，理解最重要的核心，理解好利益冲突。&lt;/p&gt;

&lt;p&gt;再说说好奇心，曹大的信息筛选全凭好奇心。而曹大的好奇心有点跟我的不太一样，他对许多未知的事物都感到好奇，希望更多地了解，会从一则小新闻里衍生地去查很多相关资料。&lt;/p&gt;

&lt;p&gt;另外说一句，有实效性的课程真的能够克服懒癌，能够逼着自己去读完听完而不浪费难得的机会。想想躺在书架上的那么多书还没怎么翻过，还有「极客时间」里的十几个课程还只看了一点点，而我却没有一丝愧疚。可能我还不够优秀吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>南科通 微信小程序</title>
      <link>https://youngwilliamz.github.io/project/sustctong/</link>
      <pubDate>Sat, 13 Oct 2018 23:32:16 +0800</pubDate>
      <guid>https://youngwilliamz.github.io/project/sustctong/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mac OS X 下优化 Terminal，一篇就够了！</title>
      <link>https://youngwilliamz.github.io/post/optimize-the-terminal-in-mac-os-x/</link>
      <pubDate>Sat, 11 Aug 2018 13:52:00 +0000</pubDate>
      <guid>https://youngwilliamz.github.io/post/optimize-the-terminal-in-mac-os-x/</guid>
      <description>

&lt;p&gt;先上最终效果图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/0goJQf8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;

&lt;!-- TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%08%e7%9b%ae%e5%bd%95&#34;&gt;目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-%e7%9b%b8%e5%85%b3%e5%b7%a5%e5%85%b7%e4%bb%8b%e7%bb%8d&#34;&gt;1. 相关工具介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%e9%85%8d%e7%bd%ae%e6%80%bb%e8%a7%88&#34;&gt;2. 配置总览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%e5%ae%89%e8%a3%85%e6%ad%a5%e9%aa%a4&#34;&gt;3. 安装步骤&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#31-%e5%ae%89%e8%a3%85-iterm2&#34;&gt;3.1. 安装 iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#32-%e5%ae%89%e8%a3%85xcodes-command-line-tools&#34;&gt;3.2. 安装XCode’s Command line tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#33-%e6%a3%80%e6%9f%a5-zsh-%e6%98%af%e5%90%a6%e5%b7%b2%e5%ae%89%e8%a3%85&#34;&gt;3.3. 检查 &lt;code&gt;zsh&lt;/code&gt; 是否已安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#34-%e5%ae%89%e8%a3%85-oh-my-zsh&#34;&gt;3.4. 安装 &lt;code&gt;Oh-My-Zsh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#35-%e5%ae%89%e8%a3%85-powerline-fonts&#34;&gt;3.5. 安装 &lt;code&gt;Powerline fonts&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#36-%e5%ae%89%e8%a3%85%e9%85%8d%e7%bd%ae%e4%b8%bb%e9%a2%98&#34;&gt;3.6. 安装配置主题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#37-%e4%bf%ae%e6%94%b9%e5%91%bd%e4%bb%a4%e6%8f%90%e7%a4%ba%e7%ac%a6&#34;&gt;3.7. 修改命令提示符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#38-%e9%85%8d%e7%bd%ae-zsh-%e5%91%bd%e4%bb%a4%e8%af%ad%e6%b3%95%e9%ab%98%e4%ba%ae&#34;&gt;3.8. 配置 &lt;code&gt;zsh&lt;/code&gt; 命令语法高亮&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%e5%a4%87%e7%94%a8%e4%b8%8b%e8%bd%bd%e9%93%be%e6%8e%a5&#34;&gt;4. 备用下载链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-%e5%8f%82%e8%80%83%e5%8f%8a%e6%84%9f%e8%b0%a2&#34;&gt;5. 参考及感谢&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;1-相关工具介绍&#34;&gt;1. 相关工具介绍&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;iTerm2&lt;/strong&gt;： Terminal 终端的替代品，拥有更多强大的功能，想了解更多请戳 &lt;a href=&#34;https://www.iterm2.com/&#34; target=&#34;_blank&#34;&gt;iTerm2 官网&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XCode’s Command line tools&lt;/strong&gt;: 开发环境集成，包含 git、gcc 等重要工具；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;zsh&lt;/strong&gt;：Linux 的一种 shell 外壳，强大的虚拟终端，和 bash 属于同类产品，OS X 已自带；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Oh-My-Zsh&lt;/strong&gt;: 用来管理 zsh 的配置，同时还有很多社区贡献的主题配置以及好用的插件可供使用，了解更多请戳 &lt;a href=&#34;https://ohmyz.sh/&#34; target=&#34;_blank&#34;&gt;Oh-My-Zsh 官网&lt;/a&gt;；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;2-配置总览&#34;&gt;2. 配置总览&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;iTerm2&lt;/li&gt;
&lt;li&gt;Oh-My-Zsh&lt;/li&gt;
&lt;li&gt;agnoster 主题&lt;/li&gt;
&lt;li&gt;zsh 命令语法高亮&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;3-安装步骤&#34;&gt;3. 安装步骤&lt;/h2&gt;

&lt;h3 id=&#34;3-1-安装-iterm2&#34;&gt;3.1. 安装 iTerm2&lt;/h3&gt;

&lt;p&gt;进入&lt;a href=&#34;https://www.iterm2.com/downloads.html&#34; target=&#34;_blank&#34;&gt;官网下载页面&lt;/a&gt;，点击 &lt;code&gt;Stable Releases&lt;/code&gt; 下面的 &lt;code&gt;Download&lt;/code&gt; 即可下载，解压后拖到应用程序中。这是简单的一小步，但是却是优化 &lt;code&gt;Terminal&lt;/code&gt; 的一大步！&lt;/p&gt;

&lt;p&gt;PS: 网络环境不太好的同学不要担心，我已经把安装包传到百度云了，请到文章最后寻找链接下载。&lt;/p&gt;

&lt;h3 id=&#34;3-2-安装xcode-s-command-line-tools&#34;&gt;3.2. 安装XCode’s Command line tools&lt;/h3&gt;

&lt;p&gt;XCode 13 个 G ,这里我们只需要 XCode’s Command line tools 来支撑 Git 的使用，所以我们不用费时费力装 XCode 来浪费那13个G。
(从 Yosemite（10.10+）开始，Command Line Tools 可以单独安装。)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装方法&lt;/strong&gt;: 打开终端，输入&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xcode-select –install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;点 &lt;code&gt;install&lt;/code&gt; ，同意，即可。&lt;/p&gt;

&lt;h3 id=&#34;3-3-检查-zsh-是否已安装&#34;&gt;3.3. 检查 &lt;code&gt;zsh&lt;/code&gt; 是否已安装&lt;/h3&gt;

&lt;p&gt;在命令行输入：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zsh --version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果显示&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zsh 5.3 (x86_64-apple-darwin17.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即zsh的当前版本号，就说明装好了，一般 OS X 自带有的。&lt;/p&gt;

&lt;p&gt;如果没装则需要输入：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install zsh zsh-completions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是用Homebrew装，需要 OS X 上有Homebrew，它的网站：&lt;a href=&#34;https://brew.sh/&#34; target=&#34;_blank&#34;&gt;https://brew.sh/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-4-安装-oh-my-zsh&#34;&gt;3.4. 安装 &lt;code&gt;Oh-My-Zsh&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;可以通过 &lt;code&gt;curl&lt;/code&gt; 或者 &lt;code&gt;wget&lt;/code&gt; 来安装&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;curl&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh -c &amp;quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;wget&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh -c &amp;quot;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;网络好的话几秒就装好了。&lt;/p&gt;

&lt;p&gt;一般安装程序会自动把默认的 shell 切换为 &lt;code&gt;zsh&lt;/code&gt;, 什么！你不懂 shell 是什么？我也不懂，你去问问度娘？或者直接右上角？其实不懂也正常，也不影响你拥有自己美美的终端。&lt;/p&gt;

&lt;p&gt;如果想修改默认 shell 为原来的 bash：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chsh -s /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启 iTerm2 就好了。&lt;/p&gt;

&lt;h3 id=&#34;3-5-安装-powerline-fonts&#34;&gt;3.5. 安装 &lt;code&gt;Powerline fonts&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;华丽丽的主题需要 &lt;a href=&#34;https://github.com/powerline/fonts&#34; target=&#34;_blank&#34;&gt;Powerline 字符集&lt;/a&gt;的支持。
通过 git 安装, 直接执行以下命令行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/powerline/fonts.git --depth=1; cd fonts; ./install.sh; cd ..; rm -rf fonts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后到 iterm2 配置，设置字体
1. 打开 &lt;strong&gt;Preferences&lt;/strong&gt;，选择 &lt;strong&gt;Profiles&lt;/strong&gt;
&lt;img src=&#34;https://ws4.sinaimg.cn/large/006tNbRwgy1fu4hnix30uj30ye0d5wfk.jpg&#34; alt=&#34;&#34; /&gt;
2. 选择 &lt;strong&gt;Text&lt;/strong&gt;，点击 &lt;strong&gt;Change Font&lt;/strong&gt;
&lt;img src=&#34;https://ws4.sinaimg.cn/large/006tNbRwgy1fu4i6ep6kcj30pi0ciaai.jpg&#34; alt=&#34;&#34; /&gt;
3. 选择&lt;strong&gt;固定宽度&lt;/strong&gt;，选择自己喜欢的字体。&lt;strong&gt;注意&lt;/strong&gt;： iTerm2 可以实时看到效果，结尾不是 &lt;code&gt;for Powerline&lt;/code&gt; 的会乱码。
&lt;img src=&#34;https://ws4.sinaimg.cn/large/006tNbRwgy1fu4i94dy0uj30ht0eqdg3.jpg&#34; alt=&#34;&#34; /&gt;
4. 接着修改字体颜色，选择另一项 &lt;code&gt;Colors&lt;/code&gt;, 点击 &lt;code&gt;Color Presets&lt;/code&gt;, 选择&lt;code&gt;Solarized Dark&lt;/code&gt;
&lt;img src=&#34;https://ws1.sinaimg.cn/large/b48b5d8dly1fu4m84ux8uj20ps0ci40g.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/T8jzFpm.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-6-安装配置主题&#34;&gt;3.6. 安装配置主题&lt;/h3&gt;

&lt;p&gt;装好之后就可以换到 agnoster 主题，Oh My Zsh 一般自带有这个主题。&lt;/p&gt;

&lt;p&gt;可以看看其它的默认主题：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls ~/.oh-my-zsh/themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要修改主题只需：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vim ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后把里面 ZSH_THEME 的值改为 ZSH_THEME=&amp;ldquo;agnoster&amp;rdquo;，保存退出。&lt;/p&gt;

&lt;p&gt;修改和保存的过程为：
1. 按下 &lt;code&gt;i&lt;/code&gt; 开始编辑
2. 通过方向键控制光标的位置
3. 定位到 &lt;code&gt;ZSH_THEME&lt;/code&gt;
4. 改为 &lt;code&gt;ZSH_THEME=&amp;quot;agnoster&amp;quot;&lt;/code&gt;
5. 按下 &lt;code&gt;ESC&lt;/code&gt;, 输入 &lt;code&gt;:wq&lt;/code&gt;, 回车
6. 搞定！&lt;/p&gt;

&lt;p&gt;（&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/wiki/Themes#agnoster&#34; target=&#34;_blank&#34;&gt;点击这里&lt;/a&gt;还有各种主题预览，任君翻牌~）&lt;/p&gt;

&lt;h3 id=&#34;3-7-修改命令提示符&#34;&gt;3.7. 修改命令提示符&lt;/h3&gt;

&lt;p&gt;默认的命令提示符为 user@userdemackbookPro，这样的提示符配合 powerlevel9k 主题太过冗长，因此我选择将该冗长的提示符去掉，在 &lt;code&gt;~/.zshrc&lt;/code&gt; 配置文件后面追加如下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 注意：DEFAULT_USER 的值必须要是系统用户名才能生效
DEFAULT_USER=&amp;quot;user&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编辑方法同上。&lt;/p&gt;

&lt;h3 id=&#34;3-8-配置-zsh-命令语法高亮&#34;&gt;3.8. 配置 &lt;code&gt;zsh&lt;/code&gt; 命令语法高亮&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/zsh-users/zsh-syntax-highlighting&#34; target=&#34;_blank&#34;&gt;zsh-syntax-highlighting&lt;/a&gt; 插件可以使你终端输入的命令有语法高亮效果，安装方法如下（oh-my-zsh 插件管理的方式安装）：
1. 复制文件到插件目录
    &lt;code&gt;bash
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
&lt;/code&gt;
2. 修改 &lt;code&gt;~/.zshrc&lt;/code&gt; 添加插件
    &lt;code&gt;bash
    # 注意：zsh-syntax-highlighting 必须放在最后面（官方推荐）
    plugins=( [plugins...] zsh-syntax-highlighting)
&lt;/code&gt;
    &lt;img src=&#34;https://i.imgur.com/N6db1vG.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;应用修改&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;大功告成~有问题欢迎留言讨论~&lt;/p&gt;

&lt;h2 id=&#34;4-备用下载链接&#34;&gt;4. 备用下载链接&lt;/h2&gt;

&lt;p&gt;iTerm2 ( 3.2.0 )： 链接: &lt;a href=&#34;https://pan.baidu.com/s/1Wm7NjtGfA81LpGFYAaEAPQ&#34; target=&#34;_blank&#34;&gt;https://pan.baidu.com/s/1Wm7NjtGfA81LpGFYAaEAPQ&lt;/a&gt; 密码: ksgv&lt;/p&gt;

&lt;h2 id=&#34;5-参考及感谢&#34;&gt;5. 参考及感谢&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qianghaohao/article/details/79440961&#34; target=&#34;_blank&#34;&gt;我的 Mac 终端配置（Mac OSX + iTerm2 + Zsh + Oh-My-Zsh）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/huihut/article/details/61418136&#34; target=&#34;_blank&#34;&gt;iTerm2 + OhMyZsh + agnoster + Powerline + solarized = 漂亮的Mac终端&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Hexo 使用 Markdown 编辑技巧大全</title>
      <link>https://youngwilliamz.github.io/post/hexo-markdown/</link>
      <pubDate>Tue, 10 Jul 2018 15:29:00 +0000</pubDate>
      <guid>https://youngwilliamz.github.io/post/hexo-markdown/</guid>
      <description>

&lt;p&gt;&lt;h2&gt;目录&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;p&gt;总结一下，&lt;code&gt;Hexo&lt;/code&gt; 下 &lt;code&gt;Markdown&lt;/code&gt; 的写法和一些奇技淫巧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：&lt;code&gt;Hexo&lt;/code&gt; 主题为 &lt;a href=&#34;https://github.com/iissnan/hexo-theme-next&#34; target=&#34;_blank&#34;&gt;Next&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;标题及分类&#34;&gt;标题及分类&lt;/h2&gt;

&lt;p&gt;格式：(使用 &lt;a href=&#34;https://github.com/zhuzhuyule/HexoEditor&#34; target=&#34;_blank&#34;&gt;HexoEditor&lt;/a&gt; 新建Post 可以自动生成以下内容)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;---
title: Hexo 使用 Markdown 编辑技巧大全
tags:
  - Hexo
  - Markdown
categories:
  - Markdown
date: 2018-07-10 15:29:00
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;阅读更多&#34;&gt;阅读更多&lt;/h2&gt;

&lt;p&gt;Hexo 主页每篇文章可以显示 &lt;code&gt;Read More&lt;/code&gt; 按钮，只显示以下这一行以上的文章内容。
格式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;&amp;lt;!-- more --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;markdown-语法&#34;&gt;Markdown 语法&lt;/h2&gt;

&lt;p&gt;Markdown 语法主要分为如下几大部分：
* &lt;strong&gt;标题&lt;/strong&gt;
* &lt;strong&gt;段落&lt;/strong&gt;
* &lt;strong&gt;区块引用&lt;/strong&gt;
* &lt;strong&gt;代码区块&lt;/strong&gt;
* &lt;strong&gt;强调&lt;/strong&gt;
* &lt;strong&gt;列表&lt;/strong&gt;
* &lt;strong&gt;分割线&lt;/strong&gt;
* &lt;strong&gt;链接&lt;/strong&gt;
* &lt;strong&gt;图片&lt;/strong&gt;
* &lt;strong&gt;反斜杠 &lt;code&gt;\&lt;/code&gt;&lt;/strong&gt;
* &lt;strong&gt;符号&amp;rsquo;`&amp;rsquo;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;标题&#34;&gt;标题&lt;/h4&gt;

&lt;p&gt;两种形式：&lt;br /&gt;
1）使用&lt;code&gt;=&lt;/code&gt;和&lt;code&gt;-&lt;/code&gt;标记一级和二级标题。
&amp;gt; 一级标题&lt;br /&gt;
&amp;gt; &lt;code&gt;=========&lt;/code&gt;&lt;br /&gt;
&amp;gt; 二级标题&lt;br /&gt;
&amp;gt; &lt;code&gt;---------&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;效果：
&amp;gt; 一级标题&lt;br /&gt;
&amp;gt; =========&lt;br /&gt;
&amp;gt; 二级标题
&amp;gt; &amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;

&lt;p&gt;2）使用&lt;code&gt;#&lt;/code&gt;，可表示1-6级标题。
&amp;gt; # 一级标题&lt;br /&gt;
&amp;gt; ## 二级标题&lt;br /&gt;
&amp;gt; ### 三级标题&lt;br /&gt;
&amp;gt; #### 四级标题&lt;br /&gt;
&amp;gt; ##### 五级标题&lt;br /&gt;
&amp;gt; ###### 六级标题&lt;/p&gt;

&lt;p&gt;效果：
&amp;gt; # 一级标题&lt;br /&gt;
&amp;gt; ## 二级标题&lt;br /&gt;
&amp;gt; ### 三级标题&lt;br /&gt;
&amp;gt; #### 四级标题&lt;br /&gt;
&amp;gt; ##### 五级标题&lt;br /&gt;
&amp;gt; ###### 六级标题&lt;/p&gt;

&lt;h4 id=&#34;段落&#34;&gt;段落&lt;/h4&gt;

&lt;p&gt;段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用&lt;strong&gt;两个以上&lt;/strong&gt;空格加上回车（引用中换行省略回车）。&lt;/p&gt;

&lt;h4 id=&#34;区块引用&#34;&gt;区块引用&lt;/h4&gt;

&lt;p&gt;在段落的每行或者只在第一行使用符号&lt;code&gt;&amp;gt;&lt;/code&gt;,还可使用多个嵌套引用，如：
&amp;gt; &amp;gt; 区块引用&lt;br /&gt;
&amp;gt; &amp;gt;&amp;gt; 嵌套引用&lt;/p&gt;

&lt;p&gt;效果：
&amp;gt; 区块引用&lt;br /&gt;
&amp;gt;&amp;gt; 嵌套引用&lt;/p&gt;

&lt;h4 id=&#34;代码区块&#34;&gt;代码区块&lt;/h4&gt;

&lt;p&gt;代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如&lt;br /&gt;
普通段落：&lt;/p&gt;

&lt;p&gt;void main()&lt;br /&gt;
{&lt;br /&gt;
    printf(&amp;ldquo;Hello, Markdown.&amp;rdquo;);&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;代码区块：
如：
&amp;gt; ``` C
&amp;gt;    void main()
&amp;gt;    {
&amp;gt;       printf(&amp;ldquo;Hello, Markdown.&amp;rdquo;);
&amp;gt;    }
&amp;gt; ```&lt;/p&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;    void main()
    {
        printf(&amp;quot;Hello, Markdown.&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: ``` 之后可以添加语言种类如 &lt;code&gt;C&lt;/code&gt;、&lt;code&gt;Java&lt;/code&gt;、&lt;code&gt;Bash&lt;/code&gt;, 需要和普通段落之间存在空行。&lt;/p&gt;

&lt;h4 id=&#34;强调&#34;&gt;强调&lt;/h4&gt;

&lt;p&gt;在强调内容两侧分别加上&lt;code&gt;*&lt;/code&gt;或者&lt;code&gt;_&lt;/code&gt;，如：
&amp;gt; *斜体*，_斜体_&lt;br /&gt;
&amp;gt; **粗体**，__粗体__&lt;/p&gt;

&lt;p&gt;效果：
&amp;gt; *斜体*，&lt;em&gt;斜体&lt;/em&gt;&lt;br /&gt;
&amp;gt; &lt;strong&gt;粗体&lt;/strong&gt;，&lt;strong&gt;粗体&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;列表&#34;&gt;列表&lt;/h4&gt;

&lt;p&gt;使用&lt;code&gt;·&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt;、或&lt;code&gt;-&lt;/code&gt;标记无序列表，如：
&amp;gt; -（+*） 第一项
&amp;gt; -（+*） 第二项
&amp;gt; - （+*）第三项&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。&lt;/p&gt;

&lt;p&gt;效果：
&amp;gt; + 第一项
&amp;gt; + 第二项
&amp;gt; + 第三项&lt;/p&gt;

&lt;p&gt;有序列表的标记方式是将上述的符号换成数字,并辅以&lt;code&gt;.&lt;/code&gt;，如：
&amp;gt; 1 . 第一项&lt;br /&gt;
&amp;gt; 2 . 第二项&lt;br /&gt;
&amp;gt; 3 . 第三项&lt;/p&gt;

&lt;p&gt;效果：
&amp;gt; 1. 第一项
&amp;gt; 2. 第二项
&amp;gt; 3. 第三项&lt;/p&gt;

&lt;h4 id=&#34;分割线&#34;&gt;分割线&lt;/h4&gt;

&lt;p&gt;分割线最常使用就是三个或以上&lt;code&gt;*&lt;/code&gt;，还可以使用&lt;code&gt;-&lt;/code&gt;和&lt;code&gt;_&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&#34;链接&#34;&gt;链接&lt;/h4&gt;

&lt;p&gt;链接可以由两种形式生成：&lt;strong&gt;行内式&lt;/strong&gt;和&lt;strong&gt;参考式&lt;/strong&gt;。&lt;br /&gt;
&lt;strong&gt;行内式&lt;/strong&gt;：
&amp;gt; [YoungWilliam的博客](&lt;a href=&#34;https://youngwilliamz.github.io/&#34; target=&#34;_blank&#34;&gt;https://youngwilliamz.github.io/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;效果：
&amp;gt; &lt;a href=&#34;https://youngwilliamz.github.io/&#34; target=&#34;_blank&#34;&gt;YoungWilliam的博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考式&lt;/strong&gt;：
&amp;gt; [YoungWilliam的博客1][1]&lt;br /&gt;
&amp;gt; [YoungWilliam的博客2][2]&lt;br /&gt;
&amp;gt; [1]:&lt;a href=&#34;https://youngwilliamz.github.io/&#34; target=&#34;_blank&#34;&gt;https://youngwilliamz.github.io/&lt;/a&gt;
&amp;gt; [2]:&lt;a href=&#34;https://youngwilliamz.github.io/&#34; target=&#34;_blank&#34;&gt;https://youngwilliamz.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;效果：
&amp;gt; &lt;a href=&#34;https://youngwilliamz.github.io/&#34; target=&#34;_blank&#34;&gt;YoungWilliam的博客1&lt;/a&gt;&lt;br /&gt;
&amp;gt; &lt;a href=&#34;https://youngwilliamz.github.io/&#34; target=&#34;_blank&#34;&gt;YoungWilliam的博客2&lt;/a&gt;&lt;br /&gt;
&amp;gt; &lt;a href=&#34;https://youngwilliamz.github.io/&#34; target=&#34;_blank&#34;&gt;YoungWilliam的博客3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：上述的&lt;code&gt;[1]:https://youngwilliamz.github.io/&lt;/code&gt;不出现在区块中。&lt;/p&gt;

&lt;h4 id=&#34;图片&#34;&gt;图片&lt;/h4&gt;

&lt;p&gt;添加图片的形式和链接相似，只需在链接的基础上前方加一个&lt;code&gt;！&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&#34;反斜杠&#34;&gt;反斜杠&lt;code&gt;\&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;相当于&lt;strong&gt;反转义&lt;/strong&gt;作用。使符号成为普通符号。&lt;/p&gt;

&lt;h4 id=&#34;符号&#34;&gt;符号 &lt;em&gt;`&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;起到标记作用。如：
&amp;gt;`ctrl+a`&lt;/p&gt;

&lt;p&gt;效果：
&amp;gt;&lt;code&gt;ctrl+a&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。
虽然有人想出面搞一个所谓的标准化的Markdown，&lt;a href=&#34;http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/&#34; target=&#34;_blank&#34;&gt;没想到还惹怒了健在的创始人John Gruber&lt;/a&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上基本是所有traditonal markdown的语法。&lt;/p&gt;

&lt;h3 id=&#34;其它&#34;&gt;其它&lt;/h3&gt;

&lt;p&gt;列表的使用(非traditonal markdown)：&lt;/p&gt;

&lt;p&gt;用&lt;code&gt;|&lt;/code&gt;表示表格纵向边界，表头和表内容用&lt;code&gt;-&lt;/code&gt;隔开，并可用&lt;code&gt;:&lt;/code&gt;进行对齐设置，两边都有&lt;code&gt;:&lt;/code&gt;则表示居中，若不加&lt;code&gt;:&lt;/code&gt;则默认左对齐。
格式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;|代码库                              |链接                                |
|:------------------------------------:|------------------------------------|
|MarkDown                              |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown &amp;quot;Markdown&amp;quot;)|
|MarkDownCopy                              |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown &amp;quot;Markdown&amp;quot;)|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;代码库&lt;/th&gt;
&lt;th&gt;链接&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;MarkDown&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/younghz/Markdown&#34; title=&#34;Markdown&#34; target=&#34;_blank&#34;&gt;https://github.com/younghz/Markdown&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;MarkDownCopy&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/younghz/Markdown&#34; title=&#34;Markdown&#34; target=&#34;_blank&#34;&gt;https://github.com/younghz/Markdown&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;关于其它扩展语法可参见具体工具的使用说明。&lt;/p&gt;

&lt;h2 id=&#34;参考文章&#34;&gt;参考文章&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://younghz.github.io/Markdown/&#34; target=&#34;_blank&#34;&gt;Markdown 基本语法&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hexo 下特有的编辑图片方式，直接使用 img 标志</title>
      <link>https://youngwilliamz.github.io/post/hexo-image-edite-method/</link>
      <pubDate>Sun, 24 Jun 2018 08:02:00 +0000</pubDate>
      <guid>https://youngwilliamz.github.io/post/hexo-image-edite-method/</guid>
      <description>&lt;p&gt;直接上代码，src对应的是图片 url&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;&amp;lt;img src=&amp;quot;https://i.loli.net/2018/06/24/5b2edf5139f61.png&amp;quot; width=&amp;quot;50%&amp;quot; height=&amp;quot;50%&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果图如下：（使用的是 &lt;a href=&#34;https://sm.ms/&#34; target=&#34;_blank&#34;&gt;SM.MS图床&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/06/24/5b2edf5139f61.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HexoEditor, 一个写 Hexo 非常好用的 Markdown 编辑器</title>
      <link>https://youngwilliamz.github.io/post/hexoeditor/</link>
      <pubDate>Sun, 24 Jun 2018 06:08:00 +0000</pubDate>
      <guid>https://youngwilliamz.github.io/post/hexoeditor/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;本文用于记录以及简单的安装&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;h2&gt;目录&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/06/24/5b2edf5139f61.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;简单介绍&#34;&gt;简单介绍&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/zhuzhuyule/HexoEditor&#34; target=&#34;_blank&#34;&gt;HexoEditor&lt;/a&gt; 是 Github 上一款开源的 Markdown 编辑器。&lt;/p&gt;

&lt;p&gt;引用原作者说的话：
&amp;gt; 这是一款为 Hexo 做了优化的 Markdown 编辑器。
使用 Electron 做框架
修改自 Moeditor, 我只是为了让他更好的去为 Hexo 下的博客更好的去书写内容。&lt;/p&gt;

&lt;p&gt;同时它还包括很多功能，其中我觉得最有用的就是：
&amp;gt; 预览内容与 Hexo 生成页面内容高度相似&lt;/p&gt;

&lt;p&gt;更多详情介绍请点击&lt;a href=&#34;https://github.com/zhuzhuyule/HexoEditor/blob/master/doc/cn/README.md#%E5%8A%9F%E8%83%BD&#34; target=&#34;_blank&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;安装过程&#34;&gt;安装过程&lt;/h2&gt;

&lt;p&gt;整个过程参照&lt;a href=&#34;https://github.com/zhuzhuyule/HexoEditor/blob/master/doc/en/Building.md&#34; target=&#34;_blank&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;1-准备工作&#34;&gt;1.准备工作&lt;/h3&gt;

&lt;h4 id=&#34;安装-git&#34;&gt;安装 &lt;code&gt;git&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/download/mac&#34; target=&#34;_blank&#34;&gt;Download Page for Mac OS X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/download/win&#34; target=&#34;_blank&#34;&gt;Download Page for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/download/linux&#34; target=&#34;_blank&#34;&gt;Download Page for Linux/Unix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;安装-nodejs&#34;&gt;安装 &lt;code&gt;nodejs&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/download/&#34; target=&#34;_blank&#34;&gt;Download Page&lt;/a&gt; (English)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/zh-cn/download/&#34; target=&#34;_blank&#34;&gt;下载地址&lt;/a&gt; (中文)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-下载配置-hexo&#34;&gt;2.下载配置 &lt;code&gt;Hexo&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#34;3-设置-npm-缓存路径&#34;&gt;3.设置 &lt;code&gt;npm&lt;/code&gt; 缓存路径&lt;/h3&gt;

&lt;h4 id=&#34;windows-下&#34;&gt;Windows 下&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm config set prefix &amp;quot;C:/Program Files/nodejs/npm_global&amp;quot;
npm config set cache &amp;quot;C:/Program Files/nodejs/npm_cache&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;linux-mac-下&#34;&gt;Linux\Mac 下&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm config set prefix &amp;quot;~/nodejs/npm_global&amp;quot;
npm config set cache &amp;quot;~/nodejs/npm_cache&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：这里的路径是你安装 &lt;code&gt;nodejs&lt;/code&gt; 的子目录下对应的路径&lt;/p&gt;

&lt;h3 id=&#34;4-设置下载来源-镜像-加速下载&#34;&gt;4.设置下载来源（镜像），加速下载&lt;/h3&gt;

&lt;p&gt;来自原作者好心提醒：
在中国，你应该设置淘宝镜像来加速下载。(PS: 这个我没试过，我是直接通过代理的)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm config set registry &amp;quot;https://registry.npm.taobao.org/&amp;quot;
npm config set electron_mirror &amp;quot;https://npm.taobao.org/mirrors/electron/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-下载-github-上最新的版本并安装&#34;&gt;5.下载 GitHub 上最新的版本并安装&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/zhuzhuyule/HexoEditor.git
cd HexoEditor
npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-启动&#34;&gt;6.启动&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，当当当，启动啦~&lt;/p&gt;

&lt;h2 id=&#34;设置快捷方式&#34;&gt;设置快捷方式&lt;/h2&gt;

&lt;p&gt;在 HexoEditor 子目录下，新建 &lt;code&gt;start.sh&lt;/code&gt; ，编辑（右键-&amp;gt;打开方式-&amp;gt;NotePad++），输入（其实就是启动）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存，退出，双击一下 &lt;code&gt;start.sh&lt;/code&gt; ，看看效果如何~
顺利的话，&lt;code&gt;gitbash&lt;/code&gt; 会弹出来，然后 HexoEditor就会弹出来了~&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/06/24/5b2ede1e2a6cc.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;p&gt;本教程到此就结束了，希望大家玩的开心~&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://youngwilliamz.github.io/authors/admin/</link>
      <pubDate>Sun, 08 Sep 2019 20:56:59 +0800</pubDate>
      <guid>https://youngwilliamz.github.io/authors/admin/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;初出茅庐开发仔&lt;/li&gt;
&lt;li&gt;拖延症晚期患者&lt;/li&gt;
&lt;li&gt;熬夜不累早起难&lt;/li&gt;
&lt;li&gt;云撸猫受益者&lt;/li&gt;
&lt;li&gt;B 站白嫖大师&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
