<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LINUX | New World</title>
    <link>https://youngwilliamz.github.io/tags/linux/</link>
      <atom:link href="https://youngwilliamz.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <description>LINUX</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><lastBuildDate>Tue, 20 Aug 2019 02:10:40 +0800</lastBuildDate>
    <image>
      <url>https://youngwilliamz.github.io/img/icon-192.png</url>
      <title>LINUX</title>
      <link>https://youngwilliamz.github.io/tags/linux/</link>
    </image>
    
    <item>
      <title>What is POSIX?</title>
      <link>https://youngwilliamz.github.io/post/what-is-posix/</link>
      <pubDate>Tue, 20 Aug 2019 02:10:40 +0800</pubDate>
      <guid>https://youngwilliamz.github.io/post/what-is-posix/</guid>
      <description>

&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;

&lt;p&gt;可移植操作系统接口（英语：&lt;code&gt;Portable Operating System Interface&lt;/code&gt;，缩写为&lt;code&gt;POSIX&lt;/code&gt;）是IEEE为要在各种 &lt;code&gt;UNIX&lt;/code&gt; 操作系统上运行软件，而定义 API 的一系列互相关联的&lt;strong&gt;标准的总称&lt;/strong&gt;，其正式称呼为&lt;code&gt;IEEE Std 1003&lt;/code&gt;，而国际标准名称为 &lt;code&gt;ISO/IEC 9945&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;来源&#34;&gt;来源&lt;/h2&gt;

&lt;p&gt;此标准源于一个大约开始于1985年的项目。&lt;/p&gt;

&lt;p&gt;POSIX 这个名称是由理查德·斯托曼（RMS）应IEEE的要求而提议的一个易于记忆的名称。&lt;/p&gt;

&lt;p&gt;它基本上是 Portable Operating System Interface（可移植操作系统接口）的缩写，而X则表明其对Unix API的传承。&lt;/p&gt;

&lt;h2 id=&#34;组成&#34;&gt;组成&lt;/h2&gt;

&lt;p&gt;当前的POSIX主要分为四个部分：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Base Definitions&lt;/li&gt;
&lt;li&gt;System Interfaces&lt;/li&gt;
&lt;li&gt;Shell and Utilities&lt;/li&gt;
&lt;li&gt;Rationale&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;posix-操作系统&#34;&gt;POSIX 操作系统&lt;/h2&gt;

&lt;p&gt;正式认证的包括 macOS 等。&lt;/p&gt;

&lt;p&gt;未得到正式认证，但基本符合 POSIX 标准的有 Android、FreeBSD 等。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/POSIX&#34; target=&#34;_blank&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Docker 背后： Linux 的 /proc</title>
      <link>https://youngwilliamz.github.io/post/linux-proc/</link>
      <pubDate>Fri, 02 Aug 2019 02:04:09 +0000</pubDate>
      <guid>https://youngwilliamz.github.io/post/linux-proc/</guid>
      <description>

&lt;h2 id=&#34;为什么要有-proc&#34;&gt;为什么要有 &lt;code&gt;/proc&lt;/code&gt;？&lt;/h2&gt;

&lt;p&gt;想必在日常开发&lt;del&gt;写&lt;/del&gt;查 BUG 中，你会经常用到像 &lt;code&gt;top&lt;/code&gt;、&lt;code&gt;ps&lt;/code&gt; 这样的 Linux 命令来查看进程、CPU 的状态吧。&lt;/p&gt;

&lt;p&gt;那你是否有想过：这些不都是内核才知道的吗？而作为身处 shell （用户态）的我们又是通过什么途径知道这些的呢？&lt;/p&gt;

&lt;p&gt;是有什么 system call 吗？是有什么高级的接口吗？&lt;/p&gt;

&lt;p&gt;不不不，其实是通过一个神奇的目录，也就是今天的主角 &lt;code&gt;/proc&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;实际上，&lt;code&gt;top&lt;/code&gt; 中的数据就是读取 &lt;code&gt;/proc/stat&lt;/code&gt; 文件获得的，&lt;code&gt;/proc/stat&lt;/code&gt; 文件被读取时会自动更新，从而 &lt;code&gt;top&lt;/code&gt; 获得最新的 CPU 占用率情况。&lt;/p&gt;

&lt;h2 id=&#34;proc-是什么&#34;&gt;&lt;code&gt;/proc&lt;/code&gt; 是什么？&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;/proc&lt;/code&gt; 其实不是一个“真正”的文件目录，而是一个“虚拟”的文件系统（virtual filesystem）。&lt;/p&gt;

&lt;p&gt;为什么是虚拟的呢？因为它不写入&lt;strong&gt;外存&lt;/strong&gt;空间，只存在于&lt;strong&gt;内存&lt;/strong&gt;中。&lt;/p&gt;

&lt;p&gt;它包含了系统运行时的信息，包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当前运行进程信息&lt;/li&gt;
&lt;li&gt;系统内存&lt;/li&gt;
&lt;li&gt;mount 设备信息&lt;/li&gt;
&lt;li&gt;一些硬件配置&lt;/li&gt;
&lt;li&gt;&amp;hellip;等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，可以把它当作&lt;strong&gt;内核&lt;/strong&gt;的信息中心。&lt;/p&gt;

&lt;p&gt;当然许多系统工具都是通过简单读取该目录下的某些内容。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;lsmod&lt;/code&gt; = &lt;code&gt;cat /proc/modules&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lspci&lt;/code&gt; = &lt;code&gt;cat /proc/pci&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在系统正在运行时，你甚至可以通过修改 &lt;code&gt;/proc&lt;/code&gt; 目录下文件，来读取修改系统的内核参数（sysctl）。&lt;/p&gt;

&lt;h2 id=&#34;proc-基本目录结构&#34;&gt;&lt;code&gt;/proc&lt;/code&gt; 基本目录结构&lt;/h2&gt;

&lt;p&gt;因为文件都在内存中，如果你去看每个文件的大小，你会发现都是 0，除了 &lt;code&gt;kcore&lt;/code&gt;, &lt;code&gt;mtrr&lt;/code&gt; and &lt;code&gt;self&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;当遍历这个目录的时候，会发现有些数字，这些都是为每个进程创建的空间，数字就是它们的 PID。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[go_dev@0f8b372ed635 proc]$ ll /proc
total 0
dr-xr-xr-x  9 go_dev go_dev     0 Aug  1 18:43 1
dr-xr-xr-x  9 go_dev go_dev     0 Aug  1 18:44 30
drwxrwxrwt  2 root   root      40 Aug  1 18:43 acpi
-r--r--r--  1 root   root       0 Aug  1 18:44 buddyinfo
dr-xr-xr-x  4 root   root       0 Aug  1 18:43 bus
-r--r--r--  1 root   root       0 Aug  1 18:44 cgroups
-r--r--r--  1 root   root       0 Aug  1 18:44 cmdline
-r--r--r--  1 root   root   23709 Aug  1 18:44 config.gz
-r--r--r--  1 root   root       0 Aug  1 18:44 consoles
-r--r--r--  1 root   root       0 Aug  1 18:44 cpuinfo
-r--r--r--  1 root   root       0 Aug  1 18:44 crypto
-r--r--r--  1 root   root       0 Aug  1 18:44 devices
-r--r--r--  1 root   root       0 Aug  1 18:44 diskstats
-r--r--r--  1 root   root       0 Aug  1 18:44 dma
dr-xr-xr-x  2 root   root       0 Aug  1 18:44 driver
-r--r--r--  1 root   root       0 Aug  1 18:44 execdomains
-r--r--r--  1 root   root       0 Aug  1 18:44 fb
-r--r--r--  1 root   root       0 Aug  1 18:44 filesystems
dr-xr-xr-x  8 root   root       0 Aug  1 18:43 fs
-r--r--r--  1 root   root       0 Aug  1 18:44 interrupts
-r--r--r--  1 root   root       0 Aug  1 18:44 iomem
-r--r--r--  1 root   root       0 Aug  1 18:44 ioports
dr-xr-xr-x 31 root   root       0 Aug  1 18:43 irq
-r--r--r--  1 root   root       0 Aug  1 18:44 kallsyms
crw-rw-rw-  1 root   root    1, 3 Aug  1 18:43 kcore
-r--r--r--  1 root   root       0 Aug  1 18:44 key-users
crw-rw-rw-  1 root   root    1, 3 Aug  1 18:43 keys
-r--------  1 root   root       0 Aug  1 18:44 kmsg
-r--------  1 root   root       0 Aug  1 18:44 kpagecgroup
-r--------  1 root   root       0 Aug  1 18:44 kpagecount
-r--------  1 root   root       0 Aug  1 18:44 kpageflags
-r--r--r--  1 root   root       0 Aug  1 18:44 loadavg
-r--r--r--  1 root   root       0 Aug  1 18:44 locks
-r--r--r--  1 root   root       0 Aug  1 18:44 meminfo
-r--r--r--  1 root   root       0 Aug  1 18:44 misc
-r--r--r--  1 root   root       0 Aug  1 18:44 modules
lrwxrwxrwx  1 root   root      11 Aug  1 18:44 mounts -&amp;gt; self/mounts
dr-xr-xr-x  2 root   root       0 Aug  1 18:44 mpt
-rw-r--r--  1 root   root       0 Aug  1 18:44 mtrr
lrwxrwxrwx  1 root   root       8 Aug  1 18:44 net -&amp;gt; self/net
-r--r--r--  1 root   root       0 Aug  1 18:44 pagetypeinfo
-r--r--r--  1 root   root       0 Aug  1 18:44 partitions
crw-rw-rw-  1 root   root    1, 3 Aug  1 18:43 sched_debug
lrwxrwxrwx  1 root   root       0 Aug  1 18:43 self -&amp;gt; 30
-rw-------  1 root   root       0 Aug  1 18:44 slabinfo
-r--r--r--  1 root   root       0 Aug  1 18:44 softirqs
-r--r--r--  1 root   root       0 Aug  1 18:44 stat
-r--r--r--  1 root   root       0 Aug  1 18:44 swaps
dr-xr-xr-x  1 root   root       0 Aug  1 18:43 sys
--w-------  1 root   root       0 Aug  1 18:43 sysrq-trigger
dr-xr-xr-x  2 root   root       0 Aug  1 18:44 sysvipc
lrwxrwxrwx  1 root   root       0 Aug  1 18:43 thread-self -&amp;gt; 30/task/30
crw-rw-rw-  1 root   root    1, 3 Aug  1 18:43 timer_list
dr-xr-xr-x  4 root   root       0 Aug  1 18:44 tty
-r--r--r--  1 root   root       0 Aug  1 18:44 uptime
-r--r--r--  1 root   root       0 Aug  1 18:44 version
-r--------  1 root   root       0 Aug  1 18:44 vmallocinfo
-r--r--r--  1 root   root       0 Aug  1 18:44 vmstat
-r--r--r--  1 root   root       0 Aug  1 18:44 zoneinfo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在此介绍几个比较重要的部分：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;/proc/N&lt;/th&gt;
&lt;th&gt;PID 为 N 的进程信息&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/proc/N/cmdline&lt;/td&gt;
&lt;td&gt;进程启动命令&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/cwd&lt;/td&gt;
&lt;td&gt;链接到进程当前工作目录&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/environ&lt;/td&gt;
&lt;td&gt;进程环境变量列表&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/exe&lt;/td&gt;
&lt;td&gt;链接到进程的执行命令文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/fd&lt;/td&gt;
&lt;td&gt;包含进程相关的所有文件描述符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/maps&lt;/td&gt;
&lt;td&gt;与进程相关的内存映射信息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/mem&lt;/td&gt;
&lt;td&gt;指代进程持有的内存，不可读&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/root&lt;/td&gt;
&lt;td&gt;链接到进程的根目录&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/stat&lt;/td&gt;
&lt;td&gt;进程的状态&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/statm&lt;/td&gt;
&lt;td&gt;进程使用的内存状态&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/N/status&lt;/td&gt;
&lt;td&gt;进程状态信息，比 stat/statm 更具可读性&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/proc/self/&lt;/td&gt;
&lt;td&gt;链接到当前正在运行的进程&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如果像了解更多的话，请自行 google 或者看看 &lt;a href=&#34;https://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/proc.html&#34; target=&#34;_blank&#34;&gt;Linux Filesystem Hierarchy: 1.14. /proc&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;docker-如何利用到-proc&#34;&gt;Docker 如何利用到 &lt;code&gt;/proc&lt;/code&gt;？&lt;/h2&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/proc.html&#34; target=&#34;_blank&#34;&gt;Linux Filesystem Hierarchy: 1.14. /proc&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/27082348/&#34; target=&#34;_blank&#34;&gt;《自己动手写Docker》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Procfs&#34; target=&#34;_blank&#34;&gt;wiki: procfs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
